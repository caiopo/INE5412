2. Apenas uma coincidência, pois o programa começa na posição de memória 16384 e tem tamanho 16384, se extendendo até a posição 32768

3. 10.7 s

4.
a) 12 MB
FF: 20, 18, 12, 15, swap
BF: 12, 15, 18, 20, swap
WF: 20, 18, 15, 12, swap
NF: 20, 18, 12, 15, swap

b) 10 MB
FF: 10, 20, 20, 18, 12, 15, swap
BF: 10, 12, 15, 18, 20, 20, swap
WF: 20, 18, 15, 12, 10, 20, swap
NF: 10, 20, 20, 18, 12, 15, swap

c) 9 MB
FF: 10, 20, 20, 18, 18, 9, 12, 15, swap
BF: 9, 10, 12, 15, 18, 18, 20, 20, swap
WF: 20, 18, 15, 12, 10, 20, 18, 9, swap
NF: 10, 20, 20, 18, 18, 9, 12, 15, swap

5.
Physical address: endereço que corresponde a uma posição da memória física, calculado a partir do endereço virtual pela MMU em sistemas que possuem proteção de memória

Virtual address: endereço usado pelos processos para acessar a memória, transformados em endereços físicos pela MMU ao acessar a memória

Note que dois processos podem ter dados em endereços virtuais iguais, mas estes endereços ao serem traduzidos em endereços físicos serão diferentes.

6.
a)
4k:
PN: b10
Offset: b011100010000

8k:
PN: b1
Offset: b0011100010000

b)
4k:
PN: b100
Offset: 0

8k:
PN: b10
Offset: 0

c)
4k:
PN: b111
Offset: b010100110000

8k:
PN: b11
Offset: b1010100110000

7.
a) 20
8212

b) 4100
4100

c) 8300
24684

9. MMU

11.
a)
M = 4096
N > M

b)
N > 64 * 1024
Se o loop for repetido, N deve ser suficientemente grande para X ocupar mais de 64 páginas, fazendo com que cada acesso a X[i] cause um miss na TLB.

13.
n/k + 1

14.
2**19*100

131.072

15.
a) 2^20 entradas.

b) Bastante, pois todos os bytes da página serão acessados, então a TLB será bastante usada.

16.
99   -> 1 ns
0.99 -> 100 ns
0.01 -> 6000 ns

2.58 ns

17.
a) A tabela de páginas é menor.

b)

21.

1020
6144
1024
8192
1028
8196
5120

22. 25%

25.
Tamanho da página -> 8k = 2^13
Tamanho da RAM -> 256k = 2^18

Tamanho da hastable para chain == 1 -> 2^18/2^13 = 2^5

Para ser < 1 deve ser > 2^5

Logo: 2^6


26.

27.


b) LRU-K

28.
FIFO

-> 0

-> 1

-> 7

-> 2

<- 0
-> 3

- 2

- 7

-> 1
<- 0

-


LRU

-> 0

-> 1

-> 7

-> 2

<- 0
-> 3

- 2

- 7

- 1

<- 3
-> 0

<- 2
-> 3

29.

30.

P1: 01110110
P2: 10010010
P3: 11101100
P4: 11010001

31.

32.

Sim, porque 2204-1213 > 400
Sim, porque mesmo 2204-1213 < 1000, a página ainda é a mais antiga carregada.

33.
a)
1 | 10 | 1 | 0 | 0
2 | 10 | 1 | 0 | 1

b)
0 | 6  | 1 | 0 | 0
1 | 10 | 1 | 0 | 0
2 | 10 | 1 | 0 | 1

36.
a) NRU: 2
b) FIFO: 3
c) LRU: 2
d) Second Chance: 2

38.
Fragmento B, porque os acessos a memória serão todos sequenciais, acessando todos os elementos da página em ordem.

32 page faults.

41.

42.
~45s


47.
